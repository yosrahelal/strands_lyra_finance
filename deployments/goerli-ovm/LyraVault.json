{
  "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_susd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "roundId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint104",
          "name": "lockAmount",
          "type": "uint104"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "roundId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint104",
          "name": "lockAmount",
          "type": "uint104"
        }
      ],
      "name": "RoundStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capitalUsed",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyCloseRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lyraRewardRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closeAmount",
          "type": "uint256"
        }
      ],
      "name": "reducePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setLyraRewardRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        }
      ],
      "name": "startNextRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strikeId",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint256",
          "name": "lockedAmountLeft",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "nextRoundReadyTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "roundInProgress",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x802c5f0b7c8bebed31a0a98218ecfb34597bcc3fc5406ddcef3840275045f484",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "transactionIndex": 0,
    "gasUsed": "3632439",
    "logsBloom": "0x
    "blockHash": "0xe7738291d522f388c4eaa590bb4c5b03e1609bc512463bf21751c8564df7523a",
    "transactionHash": "0x802c5f0b7c8bebed31a0a98218ecfb34597bcc3fc5406ddcef3840275045f484",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 449514,
        "transactionHash": "0x802c5f0b7c8bebed31a0a98218ecfb34597bcc3fc5406ddcef3840275045f484",
        "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe7738291d522f388c4eaa590bb4c5b03e1609bc512463bf21751c8564df7523a"
      }
    ],
    "blockNumber": 449514,
    "cumulativeGasUsed": "3632439",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5108a03E4daFb6Af2cb8416cDBe20b4D6c675704",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    604800,
    "LyraVault Share",
    "Lyra VS",
    {
      "decimals": 18,
      "cap": "100000000000000000000000",
      "asset": "0x5108a03E4daFb6Af2cb8416cDBe20b4D6c675704"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "da1b2efd2c033d4948af2192ee20b985",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_susd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"lockAmount\",\"type\":\"uint104\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"roundId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint104\",\"name\":\"lockAmount\",\"type\":\"uint104\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capitalUsed\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCloseRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lyraRewardRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeAmount\",\"type\":\"uint256\"}],\"name\":\"reducePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setLyraRewardRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"}],\"name\":\"startNextRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strikeId\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"nextRoundReadyTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundInProgress\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"closeRound()\":{\"details\":\"close the current round, enable user to deposit for the next round\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\"}},\"depositFor(uint256,address)\":{\"params\":{\"amount\":\"is the amount of `asset` to deposit\",\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"emergencyCloseRound()\":{\"details\":\"Close the current round, enable user to deposit for the next round\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"reducePosition(uint256,uint256)\":{\"details\":\"anyone close part of the position with premium made by the strategy if a position is dangerous\",\"params\":{\"positionId\":\"the positiion to close\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setLyraRewardRecipient(address)\":{\"params\":{\"recipient\":\"recipient address\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setStrategy(address)\":{\"details\":\"set strategy contract. This function can only be called by owner.\",\"params\":{\"_strategy\":\"new strategy contract address\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"startNextRound(uint256)\":{\"params\":{\"boardId\":\"board id (asset + expiry) for next round.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"trade(uint256)\":{\"details\":\"anyone can trigger a trade\",\"params\":{\"strikeId\":\"the strike id to sell\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"deposit(uint256)\":{\"notice\":\"Deposits the `asset` from msg.sender.\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setLyraRewardRecipient(address)\":{\"notice\":\"set set new address to receive Lyra trading reward on behalf of the vault\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"startNextRound(uint256)\":{\"notice\":\"start the next round\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"LyraVault help users run option-selling strategies on Lyra AMM.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/LyraVault.sol\":\"LyraVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/core/BaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../libraries/VaultLifecycle.sol\\\";\\nimport {ShareMath} from \\\"../libraries/ShareMath.sol\\\";\\n\\ncontract BaseVault is ReentrancyGuard, Ownable, ERC20, Initializable {\\n  using SafeERC20 for IERC20;\\n  using ShareMath for Vault.DepositReceipt;\\n\\n  /************************************************\\n   *  NON UPGRADEABLE STORAGE\\n   ***********************************************/\\n\\n  /// @notice Stores the user's pending deposit for the round\\n  mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n  /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n  /// This is used to determine the number of shares to be returned\\n  /// to a user with their DepositReceipt.depositAmount\\n  mapping(uint => uint) public roundPricePerShare;\\n\\n  /// @notice Stores pending user withdrawals\\n  mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n  /// @notice Vault's parameters like cap, decimals\\n  Vault.VaultParams public vaultParams;\\n\\n  /// @notice Vault's lifecycle state like round and locked amounts\\n  Vault.VaultState public vaultState;\\n\\n  /// @notice Fee recipient for the performance and management fees\\n  address public feeRecipient;\\n\\n  /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n  uint public performanceFee;\\n\\n  /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n  uint public managementFee;\\n\\n  // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n  uint[30] private ____gap;\\n\\n  // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n  // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\\n  // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\\n  // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n  /************************************************\\n   *  IMMUTABLES & CONSTANTS\\n   ***********************************************/\\n\\n  // Round per year scaled up FEE_MULTIPLIER\\n  uint private immutable roundPerYear;\\n\\n  /************************************************\\n   *  EVENTS\\n   ***********************************************/\\n\\n  event Deposit(address indexed account, uint amount, uint round);\\n\\n  event InitiateWithdraw(address indexed account, uint shares, uint round);\\n\\n  event Redeem(address indexed account, uint share, uint round);\\n\\n  event ManagementFeeSet(uint managementFee, uint newManagementFee);\\n\\n  event PerformanceFeeSet(uint performanceFee, uint newPerformanceFee);\\n\\n  event CapSet(uint oldCap, uint newCap, address manager);\\n\\n  event Withdraw(address indexed account, uint amount, uint shares);\\n\\n  event CollectVaultFees(uint performanceFee, uint vaultFee, uint round, address indexed feeRecipient);\\n\\n  /************************************************\\n   *  CONSTRUCTOR & INITIALIZATION\\n   ***********************************************/\\n\\n  /**\\n   * @notice Initializes the contract with immutable variables\\n   */\\n  constructor(\\n    address _feeRecipient,\\n    uint _roundDuration,\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    Vault.VaultParams memory _vaultParams\\n  ) ERC20(_tokenName, _tokenSymbol) {\\n    feeRecipient = _feeRecipient;\\n    uint _roundPerYear = (uint(365 days) * Vault.FEE_MULTIPLIER) / _roundDuration;\\n    roundPerYear = _roundPerYear;\\n    vaultParams = _vaultParams;\\n\\n    uint assetBalance = IERC20(vaultParams.asset).balanceOf(address(this));\\n    ShareMath.assertUint104(assetBalance);\\n    vaultState.lastLockedAmount = uint104(assetBalance);\\n    vaultState.round = 1;\\n  }\\n\\n  /************************************************\\n   *  SETTERS\\n   ***********************************************/\\n\\n  /**\\n   * @notice Sets the new fee recipient\\n   * @param newFeeRecipient is the address of the new fee recipient\\n   */\\n  function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n    require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n    require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n    feeRecipient = newFeeRecipient;\\n  }\\n\\n  /**\\n   * @notice Sets the management fee for the vault\\n   * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n   */\\n  function setManagementFee(uint newManagementFee) external onlyOwner {\\n    require(newManagementFee < 100 * Vault.FEE_MULTIPLIER, \\\"Invalid management fee\\\");\\n\\n    emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n    // We are dividing annualized management fee by number of rounds in a year\\n    managementFee = (newManagementFee * Vault.FEE_MULTIPLIER) / roundPerYear;\\n  }\\n\\n  /**\\n   * @notice Sets the performance fee for the vault\\n   * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n   */\\n  function setPerformanceFee(uint newPerformanceFee) external onlyOwner {\\n    require(newPerformanceFee < 100 * Vault.FEE_MULTIPLIER, \\\"Invalid performance fee\\\");\\n\\n    emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n\\n    performanceFee = newPerformanceFee;\\n  }\\n\\n  /**\\n   * @notice Sets a new cap for deposits\\n   * @param newCap is the new cap for deposits\\n   */\\n  function setCap(uint newCap) external onlyOwner {\\n    require(newCap > 0, \\\"!newCap\\\");\\n\\n    emit CapSet(vaultParams.cap, newCap, msg.sender);\\n\\n    ShareMath.assertUint104(newCap);\\n    vaultParams.cap = uint104(newCap);\\n  }\\n\\n  /************************************************\\n   *  DEPOSIT & WITHDRAWALS\\n   ***********************************************/\\n\\n  /**\\n   * @notice Deposits the `asset` from msg.sender.\\n   * @param amount is the amount of `asset` to deposit\\n   */\\n  function deposit(uint amount) external nonReentrant {\\n    require(amount > 0, \\\"!amount\\\");\\n\\n    _depositFor(amount, msg.sender);\\n\\n    // An approve() by the msg.sender is required beforehand\\n    IERC20(vaultParams.asset).safeTransferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  /**\\n   * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n   * @notice Used for vault -> vault deposits on the user's behalf\\n   * @param amount is the amount of `asset` to deposit\\n   * @param creditor is the address that can claim/withdraw deposited amount\\n   */\\n  function depositFor(uint amount, address creditor) external nonReentrant {\\n    require(amount > 0, \\\"!amount\\\");\\n    require(creditor != address(0), \\\"!creditor\\\");\\n\\n    _depositFor(amount, creditor);\\n\\n    // An approve() by the msg.sender is required beforehand\\n    IERC20(vaultParams.asset).safeTransferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  /**\\n   * @notice Mints the vault shares to the creditor\\n   * @param amount is the amount of `asset` deposited\\n   * @param creditor is the address to receieve the deposit\\n   */\\n  function _depositFor(uint amount, address creditor) private {\\n    uint currentRound = vaultState.round;\\n    uint totalWithDepositedAmount = totalBalance() + amount;\\n\\n    require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n\\n    emit Deposit(creditor, amount, currentRound);\\n\\n    Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n    // process unprocessed pending deposit from the previous rounds\\n    uint unredeemedShares = depositReceipt.getSharesFromReceipt(\\n      currentRound,\\n      roundPricePerShare[depositReceipt.round],\\n      vaultParams.decimals\\n    );\\n\\n    uint depositAmount = amount;\\n\\n    // If we have a pending deposit in the current round, we add on to the pending deposit\\n    if (currentRound == depositReceipt.round) {\\n      uint newAmount = uint(depositReceipt.amount) + amount;\\n      depositAmount = newAmount;\\n    }\\n\\n    ShareMath.assertUint104(depositAmount);\\n\\n    depositReceipts[creditor] = Vault.DepositReceipt({\\n      round: uint16(currentRound),\\n      amount: uint104(depositAmount),\\n      unredeemedShares: uint128(unredeemedShares)\\n    });\\n\\n    uint newTotalPending = uint(vaultState.totalPending) + amount;\\n    ShareMath.assertUint128(newTotalPending);\\n\\n    vaultState.totalPending = uint128(newTotalPending);\\n  }\\n\\n  /**\\n   * @notice Initiates a withdrawal that can be processed once the round completes\\n   * @param numShares is the number of shares to withdraw\\n   */\\n  function initiateWithdraw(uint numShares) external nonReentrant {\\n    require(numShares > 0, \\\"!numShares\\\");\\n\\n    // We do a max redeem before initiating a withdrawal\\n    // But we check if they must first have unredeemed shares\\n    if (depositReceipts[msg.sender].amount > 0 || depositReceipts[msg.sender].unredeemedShares > 0) {\\n      _redeem(0, true);\\n    }\\n\\n    // This caches the `round` variable used in shareBalances\\n    uint currentRound = vaultState.round;\\n    Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n    bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n    emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n    uint existingShares = uint(withdrawal.shares);\\n\\n    uint withdrawalShares;\\n    if (withdrawalIsSameRound) {\\n      withdrawalShares = existingShares + numShares;\\n    } else {\\n      require(existingShares == 0, \\\"Existing withdraw\\\");\\n      withdrawalShares = numShares;\\n      withdrawals[msg.sender].round = uint16(currentRound);\\n    }\\n\\n    ShareMath.assertUint128(withdrawalShares);\\n    withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n    uint newQueuedWithdrawShares = uint(vaultState.queuedWithdrawShares) + numShares;\\n    ShareMath.assertUint128(newQueuedWithdrawShares);\\n    vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n    _transfer(msg.sender, address(this), numShares);\\n  }\\n\\n  /**\\n   * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n   */\\n  function completeWithdraw() external nonReentrant {\\n    Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n    uint withdrawalShares = withdrawal.shares;\\n    uint withdrawalRound = withdrawal.round;\\n\\n    // This checks if there is a withdrawal\\n    require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n    require(withdrawalRound < vaultState.round, \\\"Round in progress\\\");\\n\\n    // We leave the round number as non-zero to save on gas for subsequent writes\\n    withdrawals[msg.sender].shares = 0;\\n    vaultState.queuedWithdrawShares = uint128(uint(vaultState.queuedWithdrawShares) - withdrawalShares);\\n\\n    uint withdrawAmount = ShareMath.sharesToAsset(\\n      withdrawalShares,\\n      roundPricePerShare[withdrawalRound],\\n      vaultParams.decimals\\n    );\\n\\n    emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n    _burn(address(this), withdrawalShares);\\n\\n    require(withdrawAmount > 0, \\\"!withdrawAmount\\\");\\n\\n    _transferAsset(msg.sender, withdrawAmount);\\n  }\\n\\n  /**\\n   * @notice Redeems shares that are owed to the account\\n   * @param numShares is the number of shares to redeem\\n   */\\n  function redeem(uint numShares) external nonReentrant {\\n    require(numShares > 0, \\\"!numShares\\\");\\n    _redeem(numShares, false);\\n  }\\n\\n  /**\\n   * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n   */\\n  function maxRedeem() external nonReentrant {\\n    _redeem(0, true);\\n  }\\n\\n  /**\\n   * @notice Redeems shares that are owed to the account\\n   * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n   * @param isMax is flag for when callers do a max redemption\\n   */\\n  function _redeem(uint numShares, bool isMax) internal {\\n    Vault.DepositReceipt memory depositReceipt = depositReceipts[msg.sender];\\n\\n    // This handles the null case when depositReceipt.round = 0\\n    // Because we start with round = 1 at `initialize`\\n    uint currentRound = vaultState.round;\\n\\n    uint unredeemedShares = depositReceipt.getSharesFromReceipt(\\n      currentRound,\\n      roundPricePerShare[depositReceipt.round],\\n      vaultParams.decimals\\n    );\\n\\n    numShares = isMax ? unredeemedShares : numShares;\\n    if (numShares == 0) {\\n      return;\\n    }\\n    require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n    // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n    // we debit from the unredeemedShares, but leave the amount field intact\\n    // If the round has past, with no new deposits, we just zero it out for new deposits.\\n    depositReceipts[msg.sender].amount = depositReceipt.round < currentRound ? 0 : depositReceipt.amount;\\n\\n    ShareMath.assertUint128(numShares);\\n    depositReceipts[msg.sender].unredeemedShares = uint128(unredeemedShares - numShares);\\n\\n    emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n    _transfer(address(this), msg.sender, numShares);\\n  }\\n\\n  /************************************************\\n   *  VAULT OPERATIONS\\n   ***********************************************/\\n\\n  /*\\n   * @notice Helper function that performs most administrative tasks\\n   * such as setting next option, minting new shares, getting vault fees, etc.\\n   * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n   * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\\n   * @return queuedWithdrawAmount is the new queued withdraw amount for this round\\n   */\\n  function _rollToNextRound(uint lastQueuedWithdrawAmount) internal returns (uint, uint) {\\n    (uint lockedBalance, uint queuedWithdrawAmount, uint newPricePerShare, uint mintShares) = VaultLifecycle.rollover(\\n      totalSupply(),\\n      vaultParams.asset,\\n      vaultParams.decimals,\\n      uint(vaultState.totalPending),\\n      vaultState.queuedWithdrawShares\\n    );\\n\\n    // Finalize the pricePerShare at the end of the round\\n    uint currentRound = vaultState.round;\\n    roundPricePerShare[currentRound] = newPricePerShare;\\n\\n    uint withdrawAmountDiff = queuedWithdrawAmount > lastQueuedWithdrawAmount\\n      ? queuedWithdrawAmount - lastQueuedWithdrawAmount\\n      : 0;\\n\\n    // Take management / performance fee from previous round and deduct\\n    lockedBalance = lockedBalance - _collectVaultFees(lockedBalance + withdrawAmountDiff);\\n\\n    // update round info\\n    vaultState.totalPending = 0;\\n    vaultState.round = uint16(currentRound + 1);\\n\\n    _mint(address(this), mintShares);\\n\\n    return (lockedBalance, queuedWithdrawAmount);\\n  }\\n\\n  /*\\n   * @notice Helper function that transfers management fees and performance fees from previous round.\\n   * @param pastWeekBalance is the balance we are about to lock for next round\\n   * @return vaultFee is the fee deducted\\n   */\\n  function _collectVaultFees(uint pastWeekBalance) internal returns (uint) {\\n    (uint performanceFeeInAsset, , uint vaultFee) = VaultLifecycle.getVaultFees(\\n      vaultState,\\n      pastWeekBalance,\\n      performanceFee,\\n      managementFee\\n    );\\n\\n    if (vaultFee > 0) {\\n      _transferAsset(payable(feeRecipient), vaultFee);\\n      emit CollectVaultFees(performanceFeeInAsset, vaultFee, vaultState.round, feeRecipient);\\n    }\\n\\n    return vaultFee;\\n  }\\n\\n  /**\\n   * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n   * @param recipient is the receiving address\\n   * @param amount is the transfer amount\\n   */\\n  function _transferAsset(address recipient, uint amount) internal {\\n    address asset = vaultParams.asset;\\n    IERC20(asset).safeTransfer(recipient, amount);\\n  }\\n\\n  /************************************************\\n   *  GETTERS\\n   ***********************************************/\\n\\n  /**\\n   * @notice Returns the asset balance held on the vault for the account\\n   * @param account is the address to lookup balance for\\n   * @return the amount of `asset` custodied by the vault for the user\\n   */\\n  function accountVaultBalance(address account) external view returns (uint) {\\n    uint _decimals = vaultParams.decimals;\\n    uint assetPerShare = ShareMath.pricePerShare(totalSupply(), totalBalance(), vaultState.totalPending, _decimals);\\n    return ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n  }\\n\\n  /**\\n   * @notice Getter for returning the account's share balance including unredeemed shares\\n   * @param account is the account to lookup share balance for\\n   * @return the share balance\\n   */\\n  function shares(address account) public view returns (uint) {\\n    (uint heldByAccount, uint heldByVault) = shareBalances(account);\\n    return heldByAccount + heldByVault;\\n  }\\n\\n  /**\\n   * @notice Getter for returning the account's share balance split between account and vault holdings\\n   * @param account is the account to lookup share balance for\\n   * @return heldByAccount is the shares held by account\\n   * @return heldByVault is the shares held on the vault (unredeemedShares)\\n   */\\n  function shareBalances(address account) public view returns (uint heldByAccount, uint heldByVault) {\\n    Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n    if (depositReceipt.round == 0) {\\n      return (balanceOf(account), 0);\\n    }\\n\\n    uint unredeemedShares = depositReceipt.getSharesFromReceipt(\\n      vaultState.round,\\n      roundPricePerShare[depositReceipt.round],\\n      vaultParams.decimals\\n    );\\n\\n    return (balanceOf(account), unredeemedShares);\\n  }\\n\\n  /**\\n   * @notice The price of a unit of share denominated in the `asset`\\n   */\\n  function pricePerShare() external view returns (uint) {\\n    return ShareMath.pricePerShare(totalSupply(), totalBalance(), vaultState.totalPending, vaultParams.decimals);\\n  }\\n\\n  /**\\n   * @notice Returns the vault's total balance, including the amounts locked into a short position\\n   * @return total balance of the vault, including the amounts locked in third party protocols\\n   */\\n  function totalBalance() public view returns (uint) {\\n    return\\n      uint(vaultState.lockedAmount - vaultState.lockedAmountLeft) + IERC20(vaultParams.asset).balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @notice Returns the token decimals\\n   */\\n  function decimals() public view override returns (uint8) {\\n    return vaultParams.decimals;\\n  }\\n}\\n\",\"keccak256\":\"0x161bb74ce2ab4b7d7fc490678875f527b92eca9fbb9fc0a8e66c91d8ea674e0f\",\"license\":\"MIT\"},\"contracts/core/LyraVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {BaseVault} from \\\"./BaseVault.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\nimport {IStrategy} from \\\"../interfaces/IStrategy.sol\\\";\\n\\n/// @notice LyraVault help users run option-selling strategies on Lyra AMM.\\ncontract LyraVault is Ownable, BaseVault {\\n  IERC20 public immutable premiumAsset;\\n  IERC20 public immutable collateralAsset;\\n\\n  IStrategy public strategy;\\n  address public lyraRewardRecipient;\\n\\n  // Amount locked for scheduled withdrawals last week;\\n  uint public lastQueuedWithdrawAmount;\\n  // % of funds to be used for weekly option purchase\\n  uint public optionAllocation;\\n\\n  event StrategyUpdated(address strategy);\\n\\n  event Trade(address user, uint positionId, uint premium, uint capitalUsed);\\n\\n  event RoundStarted(uint16 roundId, uint104 lockAmount);\\n\\n  event RoundClosed(uint16 roundId, uint104 lockAmount);\\n\\n  constructor(\\n    address _susd,\\n    address _feeRecipient,\\n    uint _roundDuration,\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    Vault.VaultParams memory _vaultParams\\n  ) BaseVault(_feeRecipient, _roundDuration, _tokenName, _tokenSymbol, _vaultParams) {\\n    premiumAsset = IERC20(_susd);\\n    collateralAsset = IERC20(_vaultParams.asset);\\n  }\\n\\n  /// @dev set strategy contract. This function can only be called by owner.\\n  /// @param _strategy new strategy contract address\\n  function setStrategy(address _strategy) external onlyOwner {\\n    if (address(strategy) != address(0)) {\\n      collateralAsset.approve(address(strategy), 0);\\n    }\\n\\n    strategy = IStrategy(_strategy);\\n    collateralAsset.approve(_strategy, type(uint).max);\\n    emit StrategyUpdated(_strategy);\\n  }\\n\\n  /// @dev anyone can trigger a trade\\n  /// @param strikeId the strike id to sell\\n  function trade(uint strikeId) external {\\n    require(vaultState.roundInProgress, \\\"round closed\\\");\\n    // perform trade through strategy\\n    (uint positionId, uint premiumReceived, uint capitalUsed) = strategy.doTrade(strikeId, lyraRewardRecipient);\\n\\n    // update the remaining locked amount\\n    vaultState.lockedAmountLeft = vaultState.lockedAmountLeft - capitalUsed;\\n\\n    // todo: udpate events\\n    emit Trade(msg.sender, positionId, premiumReceived, capitalUsed);\\n  }\\n\\n  /// @dev anyone close part of the position with premium made by the strategy if a position is dangerous\\n  /// @param positionId the positiion to close\\n  function reducePosition(uint positionId, uint closeAmount) external {\\n    strategy.reducePosition(positionId, closeAmount, lyraRewardRecipient);\\n  }\\n\\n  /// @dev close the current round, enable user to deposit for the next round\\n  function closeRound() external {\\n    require(strategy.activeExpiry() < block.timestamp, \\\"cannot close round if board not expired\\\");\\n    require(vaultState.roundInProgress, \\\"round closed\\\");\\n\\n    uint104 lockAmount = vaultState.lockedAmount;\\n    vaultState.lastLockedAmount = lockAmount;\\n    vaultState.lockedAmountLeft = 0;\\n    vaultState.lockedAmount = 0;\\n    vaultState.nextRoundReadyTimestamp = block.timestamp + Vault.ROUND_DELAY;\\n    vaultState.roundInProgress = false;\\n\\n    // won't be able to close if positions are not settled\\n    strategy.returnFundsAndClearStrikes();\\n\\n    emit RoundClosed(vaultState.round, lockAmount);\\n  }\\n\\n  /// @dev Close the current round, enable user to deposit for the next round\\n  //       Can call multiple times before round starts to close all positions\\n  function emergencyCloseRound() external onlyOwner {\\n    require(vaultState.roundInProgress, \\\"round closed\\\");\\n\\n    uint104 lockAmount = vaultState.lockedAmount;\\n    vaultState.lastLockedAmount = lockAmount;\\n    vaultState.lockedAmountLeft = 0;\\n    vaultState.lockedAmount = 0;\\n    vaultState.nextRoundReadyTimestamp = block.timestamp + Vault.ROUND_DELAY;\\n    vaultState.roundInProgress = false;\\n\\n    strategy.emergencyCloseAll(lyraRewardRecipient);\\n    emit RoundClosed(vaultState.round, lockAmount);\\n  }\\n\\n  /// @notice start the next round\\n  /// @param boardId board id (asset + expiry) for next round.\\n  function startNextRound(uint boardId) external onlyOwner {\\n    require(!vaultState.roundInProgress, \\\"round in progress\\\");\\n    require(block.timestamp > vaultState.nextRoundReadyTimestamp, \\\"Delay between rounds not elapsed\\\");\\n\\n    strategy.setBoard(boardId);\\n\\n    (uint lockedBalance, uint queuedWithdrawAmount) = _rollToNextRound(lastQueuedWithdrawAmount);\\n\\n    vaultState.lockedAmount = uint104(lockedBalance);\\n    vaultState.lockedAmountLeft = lockedBalance;\\n    vaultState.roundInProgress = true;\\n    lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n    emit RoundStarted(vaultState.round, uint104(lockedBalance));\\n  }\\n\\n  /// @notice set set new address to receive Lyra trading reward on behalf of the vault\\n  /// @param recipient recipient address\\n  function setLyraRewardRecipient(address recipient) external onlyOwner {\\n    lyraRewardRecipient = recipient;\\n  }\\n}\\n\",\"keccak256\":\"0xa10a9a953dd3c57e6e6657027d7d81d4c2c221c2cdb3c409d0a3b2db139d26a5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function symbol() external view returns (string calldata);\\n\\n  function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x98fdc868b087fd38e413b31c1687bb9a3ed756d975795e259ba066ff4a1ac3b8\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\npragma solidity ^0.8.9;\\n\\ninterface IStrategy {\\n  function activeExpiry() external returns (uint);\\n\\n  function setBoard(uint boardId) external;\\n\\n  function doTrade(uint strikeId, address rewardRecipient)\\n    external\\n    returns (\\n      uint positionId,\\n      uint premium,\\n      uint collateralAdded\\n    );\\n\\n  function reducePosition(\\n    uint positionId,\\n    uint closeAmount,\\n    address rewardRecipient\\n  ) external;\\n\\n  function emergencyCloseAll(address lyraRewardRecipient) external;\\n\\n  function returnFundsAndClearStrikes() external;\\n}\\n\",\"keccak256\":\"0x924ce8d0f4b7047484cb610d6016f39ce953dc898ec68cf1f1cf3aef78c19925\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n  function assetToShares(\\n    uint assetAmount,\\n    uint assetPerShare,\\n    uint decimals\\n  ) internal pure returns (uint) {\\n    // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n    // which should never happen.\\n    require(assetPerShare > 0, \\\"Invalid assetPerShare\\\");\\n\\n    return (assetAmount * (10**decimals)) / (assetPerShare);\\n  }\\n\\n  function sharesToAsset(\\n    uint shares,\\n    uint assetPerShare,\\n    uint decimals\\n  ) internal pure returns (uint) {\\n    // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n    // which should never happen.\\n    require(assetPerShare > 0, \\\"Invalid assetPerShare\\\");\\n\\n    return (shares * assetPerShare) / (10**decimals);\\n  }\\n\\n  /**\\n   * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n   * @param depositReceipt is the user's deposit receipt\\n   * @param currentRound is the `round` stored on the vault\\n   * @param assetPerShare is the price in asset per share\\n   * @param decimals is the number of decimals the asset/shares use\\n   * @return unredeemedShares is the user's virtual balance of shares that are owed\\n   */\\n  function getSharesFromReceipt(\\n    Vault.DepositReceipt memory depositReceipt,\\n    uint currentRound,\\n    uint assetPerShare,\\n    uint decimals\\n  ) internal pure returns (uint unredeemedShares) {\\n    if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n      uint sharesFromRound = assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n      return uint(depositReceipt.unredeemedShares) + sharesFromRound;\\n    }\\n    return depositReceipt.unredeemedShares;\\n  }\\n\\n  function pricePerShare(\\n    uint totalSupply,\\n    uint totalBalance,\\n    uint pendingAmount,\\n    uint decimals\\n  ) internal pure returns (uint) {\\n    uint singleShare = 10**decimals;\\n    return totalSupply > 0 ? (singleShare * (totalBalance - pendingAmount)) / (totalSupply) : singleShare;\\n  }\\n\\n  /************************************************\\n   *  HELPERS\\n   ***********************************************/\\n\\n  function assertUint104(uint num) internal pure {\\n    require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n  }\\n\\n  function assertUint128(uint num) internal pure {\\n    require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xa4bc80db31e67f2b3695c1e0ff2130b71ba7b5ab45cf760a0574a12a079a6b70\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary Vault {\\n  /************************************************\\n   *  IMMUTABLES & CONSTANTS\\n   ***********************************************/\\n\\n  // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n  uint internal constant FEE_MULTIPLIER = 10**6;\\n\\n  uint internal constant ROUND_DELAY = 1 days;\\n\\n  struct VaultParams {\\n    // Token decimals for vault shares\\n    uint8 decimals;\\n    // Vault cap\\n    uint104 cap;\\n    // Asset used in Theta / Delta Vault\\n    address asset;\\n  }\\n\\n  struct VaultState {\\n    // 32 byte slot 1\\n    //  Current round number. `round` represents the number of `period`s elapsed.\\n    uint16 round;\\n    // Amount that is currently locked for the strategy\\n    uint104 lockedAmount;\\n    // Amount that was locked for strategy in the previous round\\n    // used for calculating performance fee deduction\\n    uint104 lastLockedAmount;\\n    // locked amount left to be used for collateral;\\n    uint lockedAmountLeft;\\n    // 32 byte slot 2\\n    // Stores the total tally of how much of `asset` there is\\n    // to be used to mint rTHETA tokens\\n    uint128 totalPending;\\n    // Amount locked for scheduled withdrawals;\\n    uint128 queuedWithdrawShares;\\n    // The timestamp next round will be ready to start\\n    uint nextRoundReadyTimestamp;\\n    // true if the current round is in progress, false if the round is idle\\n    bool roundInProgress;\\n  }\\n\\n  struct DepositReceipt {\\n    // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n    uint16 round;\\n    // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n    uint104 amount;\\n    // Unredeemed shares balance\\n    uint128 unredeemedShares;\\n  }\\n\\n  struct Withdrawal {\\n    // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n    uint16 round;\\n    // Number of shares withdrawn\\n    uint128 shares;\\n  }\\n}\\n\",\"keccak256\":\"0x8da4207bd6804b6d00e2dc8913218297a725525c55138afdf5ee7c41404516e1\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\n\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev copied from Ribbon's VaultLifeCycle, changed to internal library for gas optimization\\n */\\nlibrary VaultLifecycle {\\n  using SafeMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @notice Calculate the shares to mint, new price per share,\\n   *         and amount of funds to re-allocate as collateral for the new round\\n   * @param currentShareSupply is the total supply of shares\\n   * @param asset is the address of the vault's asset\\n   * @param decimals is the decimals of the asset\\n   * @param pendingAmount is the amount of funds pending from recent deposits\\n   * @return newLockedAmount is the amount of funds to allocate for the new round\\n   * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n   * @return newPricePerShare is the price per share of the new round\\n   * @return mintShares is the amount of shares to mint from deposits\\n   */\\n  function rollover(\\n    uint currentShareSupply,\\n    address asset,\\n    uint decimals,\\n    uint pendingAmount,\\n    uint queuedWithdrawShares\\n  )\\n    internal\\n    view\\n    returns (\\n      uint newLockedAmount,\\n      uint queuedWithdrawAmount,\\n      uint newPricePerShare,\\n      uint mintShares\\n    )\\n  {\\n    uint currentBalance = IERC20(asset).balanceOf(address(this));\\n\\n    newPricePerShare = ShareMath.pricePerShare(currentShareSupply, currentBalance, pendingAmount, decimals);\\n\\n    // After closing the short, if the options expire in-the-money\\n    // vault pricePerShare would go down because vault's asset balance decreased.\\n    // This ensures that the newly-minted shares do not take on the loss.\\n    uint _mintShares = ShareMath.assetToShares(pendingAmount, newPricePerShare, decimals);\\n\\n    uint newSupply = currentShareSupply.add(_mintShares);\\n\\n    uint queuedWithdraw = newSupply > 0 ? ShareMath.sharesToAsset(queuedWithdrawShares, newPricePerShare, decimals) : 0;\\n\\n    return (currentBalance.sub(queuedWithdraw), queuedWithdraw, newPricePerShare, _mintShares);\\n  }\\n\\n  /**\\n   * @notice Calculates the performance and management fee for this week's round\\n   * @param vaultState is the struct with vault accounting state\\n   * @param currentLockedBalance is the amount of funds currently locked in opyn\\n   * @param performanceFeePercent is the performance fee pct.\\n   * @param managementFeePercent is the management fee pct.\\n   * @return performanceFeeInAsset is the performance fee\\n   * @return managementFeeInAsset is the management fee\\n   * @return vaultFee is the total fees\\n   */\\n  function getVaultFees(\\n    Vault.VaultState storage vaultState,\\n    uint currentLockedBalance,\\n    uint performanceFeePercent,\\n    uint managementFeePercent\\n  )\\n    internal\\n    view\\n    returns (\\n      uint performanceFeeInAsset,\\n      uint managementFeeInAsset,\\n      uint vaultFee\\n    )\\n  {\\n    uint prevLockedAmount = vaultState.lastLockedAmount;\\n\\n    uint lockedBalanceSansPending = currentLockedBalance.sub(vaultState.totalPending);\\n\\n    uint _performanceFeeInAsset;\\n    uint _managementFeeInAsset;\\n    uint _vaultFee;\\n\\n    // Take performance fee and management fee ONLY if difference between\\n    // last week and this week's vault deposits, taking into account pending\\n    // deposits and withdrawals, is positive. If it is negative, last week's\\n    // option expired ITM past breakeven, and the vault took a loss so we\\n    // do not collect performance fee for last week\\n\\n    // todo: update management fee to exclude profit?\\n    if (lockedBalanceSansPending > prevLockedAmount) {\\n      _performanceFeeInAsset = performanceFeePercent > 0\\n        ? lockedBalanceSansPending.sub(prevLockedAmount).mul(performanceFeePercent).div(100 * Vault.FEE_MULTIPLIER)\\n        : 0;\\n      _managementFeeInAsset = managementFeePercent > 0\\n        ? lockedBalanceSansPending.mul(managementFeePercent).div(100 * Vault.FEE_MULTIPLIER)\\n        : 0;\\n\\n      _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n    }\\n\\n    return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n  }\\n}\\n\",\"keccak256\":\"0xbd4eee6e00d874390b27d2be4e7e796c33bd7dae1fb264ea5856c677726f0291\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200437738038062004377833981016040819052620000349162000472565b6001600055848484848482826200004b3362000202565b815162000060906005906020850190620002a6565b50805162000076906006906020840190620002a6565b5050601280546001600160a01b0319166001600160a01b03881617905550600084620000aa620f42406301e133806200057b565b620000b69190620005a9565b60808190528251600b805460208601516001600160681b0316610100026001600160701b031990911660ff90931692909217919091179055604080840151600c80546001600160a01b039092166001600160a01b03199092168217905590516370a0823160e01b81523060048201529192506000916370a082319060240160206040518083038186803b1580156200014d57600080fd5b505afa15801562000162573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001889190620005cc565b9050620001a0816200025460201b620024c51760201c565b600d805461ffff196001600160681b03909316600160781b029290921661ffff600160781b03600160e01b03199092169190911760011790555050506001600160a01b0398891660a0525050506040015190941660c052506200062392505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160681b03811115620002a35760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b604482015260640160405180910390fd5b50565b828054620002b490620005e6565b90600052602060002090601f016020900481019282620002d8576000855562000323565b82601f10620002f357805160ff191683800117855562000323565b8280016001018555821562000323579182015b828111156200032357825182559160200191906001019062000306565b506200033192915062000335565b5090565b5b8082111562000331576000815560010162000336565b80516001600160a01b03811681146200036457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620003a457620003a462000369565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620003d557620003d562000369565b604052919050565b600082601f830112620003ef57600080fd5b81516001600160401b038111156200040b576200040b62000369565b602062000421601f8301601f19168201620003aa565b82815285828487010111156200043657600080fd5b60005b838110156200045657858101830151828201840152820162000439565b83811115620004685760008385840101525b5095945050505050565b6000806000806000808688036101008112156200048e57600080fd5b62000499886200034c565b9650620004a9602089016200034c565b604089015160608a015191975095506001600160401b0380821115620004ce57600080fd5b620004dc8b838c01620003dd565b955060808a0151915080821115620004f357600080fd5b50620005028a828b01620003dd565b9350506060609f19820112156200051857600080fd5b50620005236200037f565b60a088015160ff811681146200053857600080fd5b815260c08801516001600160681b03811681146200055557600080fd5b60208201526200056860e089016200034c565b6040820152809150509295509295509295565b6000816000190483118215151615620005a457634e487b7160e01b600052601160045260246000fd5b500290565b600082620005c757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215620005df57600080fd5b5051919050565b600181811c90821680620005fb57607f821691505b602082108114156200061d57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051613d16620006616000396000818161075201528181610c350152610d00015260006107c3015260006124890152613d166000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063c9f369c2116100f9578063e278fe6f116100a2578063f656ba511161007c578063f656ba511461085f578063f756fa2114610887578063fb8dc75e1461088f578063fe56e232146108a257600080fd5b8063e278fe6f14610831578063e74b981b14610839578063f2fde38b1461084c57600080fd5b8063db330143116100d3578063db330143146107be578063dd62ed3e146107e5578063df1dd8261461081e57600080fd5b8063c9f369c21461078f578063ce7c2ac214610798578063db006a75146107ab57600080fd5b8063a6f7f5d61161015b578063aabaecd611610135578063aabaecd61461074d578063ad7a672f14610774578063b6b55f251461077c57600080fd5b8063a6f7f5d61461071e578063a8c62e7614610727578063a9059cbb1461073a57600080fd5b80639fcc2d751161018c5780639fcc2d75146106a8578063a457c2d714610703578063a5a279b51461071657600080fd5b80638da5cb5b1461068757806395d89b411461069857806399530b06146106a057600080fd5b8063469048401161028157806370a082311161022a5780637a9262a2116102045780637a9262a2146105f45780637e108d521461064b57806387153eb11461065e578063877887821461067e57600080fd5b806370a08231146105b0578063715018a6146105d957806375a0b6dd146105e157600080fd5b80636719b2ee1161025b5780636719b2ee1461051e5780636f31ab341461059557806370897b231461059d57600080fd5b806346904840146104ef57806347786d3714610502578063503c70aa1461051557600080fd5b80632728f333116102e357806336efd16f116102bd57806336efd16f146104b657806339509351146104c95780633f23bb73146104dc57600080fd5b80632728f333146103e1578063313ce5671461048e57806333a100ca146104a357600080fd5b80630f68b30b116103145780630f68b30b1461039157806318160ddd146103bc57806323b872dd146103ce57600080fd5b806306fdde031461033b5780630900856314610359578063095ea7b31461036e575b600080fd5b6103436108b5565b6040516103509190613949565b60405180910390f35b61036c61036736600461397c565b610947565b005b61038161037c3660046139b1565b610b61565b6040519015158152602001610350565b6034546103a4906001600160a01b031681565b6040516001600160a01b039091168152602001610350565b6004545b604051908152602001610350565b6103816103dc3660046139db565b610b7b565b600d54600e54600f546010546011546104339461ffff8116946001600160681b03620100008304811695600160781b909304169390926001600160801b0380841693600160801b900416919060ff1688565b6040805161ffff9990991689526001600160681b0397881660208a0152959096169487019490945260608601929092526001600160801b0390811660808601521660a084015260c0830152151560e082015261010001610350565b600b5460405160ff9091168152602001610350565b61036c6104b1366004613a17565b610ba1565b61036c6104c4366004613a32565b610dbf565b6103816104d73660046139b1565b610ecf565b6103c06104ea366004613a17565b610f0e565b6012546103a4906001600160a01b031681565b61036c61051036600461397c565b610f5b565b6103c060355481565b61056461052c366004613a17565b60086020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b031690820152606001610350565b61036c61108d565b61036c6105ab36600461397c565b6110f9565b6103c06105be366004613a17565b6001600160a01b031660009081526002602052604090205490565b61036c6111f0565b61036c6105ef366004613a5e565b611256565b610629610602366004613a17565b600a6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610350565b61036c61065936600461397c565b6112e2565b6103c061066c36600461397c565b60096020526000908152604090205481565b6103c060135481565b6001546001600160a01b03166103a4565b610343611563565b6103c0611572565b600b54600c546106d39160ff8116916101009091046001600160681b0316906001600160a01b031683565b6040805160ff90941684526001600160681b0390921660208401526001600160a01b031690820152606001610350565b6103816107113660046139b1565b6115a7565b61036c61165c565b6103c060145481565b6033546103a4906001600160a01b031681565b6103816107483660046139b1565b61182e565b6103a47f000000000000000000000000000000000000000000000000000000000000000081565b6103c061183c565b61036c61078a36600461397c565b6118e1565b6103c060365481565b6103c06107a6366004613a17565b61199a565b61036c6107b936600461397c565b6119b7565b6103a47f000000000000000000000000000000000000000000000000000000000000000081565b6103c06107f3366004613a80565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61036c61082c36600461397c565b611a54565b61036c611ba5565b61036c610847366004613a17565b611dc5565b61036c61085a366004613a17565b611f02565b61087261086d366004613a17565b611fe4565b60408051928352602083019190915201610350565b61036c6120be565b61036c61089d366004613a17565b61230c565b61036c6108b036600461397c565b612395565b6060600580546108c490613aaa565b80601f01602080910402602001604051908101604052809291908181526020018280546108f090613aaa565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b5050505050905090565b6001546001600160a01b031633146109a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60115460ff16156109f95760405162461bcd60e51b815260206004820152601160248201527f726f756e6420696e2070726f6772657373000000000000000000000000000000604482015260640161099d565b6010544211610a4a5760405162461bcd60e51b815260206004820181905260248201527f44656c6179206265747765656e20726f756e6473206e6f7420656c6170736564604482015260640161099d565b6033546040517fae74fc4d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063ae74fc4d90602401600060405180830381600087803b158015610aa957600080fd5b505af1158015610abd573d6000803e3d6000fd5b50505050600080610acf60355461251c565b600d80546001600160681b0384166201000081026effffffffffffffffffffffffff00001983168117909355600e8590556011805460ff1916600117905560358490556040805161ffff9485169490931693909317825260208201529294509092507f2f93a032ac7d7eee7307fc88610b447c5f48ae62c15f146b43168c282fa9490a910160405180910390a1505050565b600033610b6f818585612614565b60019150505b92915050565b600033610b8985828561276d565b610b948585856127ff565b60019150505b9392505050565b6001546001600160a01b03163314610bfb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6033546001600160a01b031615610cb55760335460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190613ae5565b505b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560405163095ea7b360e01b8152600481019190915260001960248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190613ae5565b506040516001600160a01b03821681527f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c906020015b60405180910390a150565b60026000541415610e125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260005581610e4e5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161099d565b6001600160a01b038116610ea45760405162461bcd60e51b815260206004820152600960248201527f216372656469746f720000000000000000000000000000000000000000000000604482015260640161099d565b610eae8282612a16565b600c54610ec6906001600160a01b0316333085612c82565b50506001600055565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190610b6f9082908690610f09908790613b1d565b612614565b600b5460009060ff1681610f3e610f2460045490565b610f2c61183c565b600f546001600160801b031685612d33565b9050610f53610f4c8561199a565b8284612d7a565b949350505050565b6001546001600160a01b03163314610fb55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b600081116110055760405162461bcd60e51b815260206004820152600760248201527f216e657743617000000000000000000000000000000000000000000000000000604482015260640161099d565b600b54604080516101009092046001600160681b031682526020820183905233908201527f0e45875b8819e52adac9df2787285bc765235018d84ab492668edfcf944628c49060600160405180910390a161105f816124c5565b600b80546001600160681b03909216610100026dffffffffffffffffffffffffff0019909216919091179055565b600260005414156110e05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260009081556110f2906001612dea565b6001600055565b6001546001600160a01b031633146111535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b611161620f42406064613b35565b81106111af5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e636520666565000000000000000000604482015260640161099d565b60135460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a1601355565b6001546001600160a01b0316331461124a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6112546000612fdd565b565b6033546034546040517f7083a90400000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b039182166044820152911690637083a90490606401600060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050505050565b600260005414156113355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b6002600055806113745760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161099d565b336000908152600860205260409020546201000090046001600160681b03161515806113be575033600090815260086020526040902054600160781b90046001600160801b031615155b156113cf576113cf60006001612dea565b600d54336000818152600a60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b031660008215611458576114518683613b1d565b90506114c7565b81156114a65760405162461bcd60e51b815260206004820152601160248201527f4578697374696e67207769746864726177000000000000000000000000000000604482015260640161099d565b50336000908152600a60205260409020805461ffff191661ffff8616179055845b6114d08161303c565b336000908152600a6020526040812080546001600160801b03808516620100000271ffffffffffffffffffffffffffffffff00001990921691909117909155600f54611525918991600160801b900416613b1d565b90506115308161303c565b600f80546001600160801b03808416600160801b0291161790556115553330896127ff565b505060016000555050505050565b6060600680546108c490613aaa565b60006115a261158060045490565b61158861183c565b600f54600b546001600160801b039091169060ff16612d33565b905090565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156116445760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161099d565b6116518286868403612614565b506001949350505050565b6001546001600160a01b031633146116b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b60115460ff166116f75760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b600d80546000600e557fffffffff0000000000000000000000000000000000000000000000000000ffff8116620100009091046001600160681b0316600160781b81026effffffffffffffffffffffffff00001916919091179091556117606201518042613b1d565b6010556011805460ff191690556033546034546040517f7dd0db1b0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690637dd0db1b90602401600060405180830381600087803b1580156117cf57600080fd5b505af11580156117e3573d6000803e3d6000fd5b5050600d546040805161ffff90921682526001600160681b03851660208301527f72a38b5b2905463b2dd317993b07770e582b99731092f75150f433b6a9f9c89e9350019050610db4565b600033610b6f8185856127ff565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613b54565b600e54600d546118d791906201000090046001600160681b0316613b6d565b6115a29190613b1d565b600260005414156119345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b6002600055806119705760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161099d565b61197a8133612a16565b600c54611992906001600160a01b0316333084612c82565b506001600055565b60008060006119a884611fe4565b9092509050610f538183613b1d565b60026000541415611a0a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260005580611a495760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161099d565b611992816000612dea565b60115460ff16611a955760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b6033546034546040517fa8c379c2000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0391821660248201526000928392839291169063a8c379c290604401606060405180830381600087803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3d9190613b84565b92509250925080600d60010154611b549190613b6d565b600e556040805133815260208101859052908101839052606081018290527f150edd20b748bc680273d4bc59d5659c3229edf2f102c013595b9b3238e158869060800160405180910390a150505050565b603354604080517f03c4d3d6000000000000000000000000000000000000000000000000000000008152905142926001600160a01b0316916303c4d3d69160048083019260209291908290030181600087803b158015611c0457600080fd5b505af1158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c9190613b54565b10611caf5760405162461bcd60e51b815260206004820152602760248201527f63616e6e6f7420636c6f736520726f756e6420696620626f617264206e6f742060448201527f6578706972656400000000000000000000000000000000000000000000000000606482015260840161099d565b60115460ff16611cf05760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b600d80546000600e557fffffffff0000000000000000000000000000000000000000000000000000ffff8116620100009091046001600160681b0316600160781b81026effffffffffffffffffffffffff0000191691909117909155611d596201518042613b1d565b6010556011805460ff19169055603354604080517f83cea54200000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916383cea5429160048181019260009290919082900301818387803b1580156117cf57600080fd5b6001546001600160a01b03163314611e1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6001600160a01b038116611e755760405162461bcd60e51b815260206004820152601060248201527f216e6577466565526563697069656e7400000000000000000000000000000000604482015260640161099d565b6012546001600160a01b0382811691161415611ed35760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e740000000000000000604482015260640161099d565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611f5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6001600160a01b038116611fd85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161099d565b611fe181612fdd565b50565b6001600160a01b03811660009081526008602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291612062575050506001600160a01b031660009081526002602052604081205491565b600d54815161ffff908116600090815260096020526040812054600b5491936120939386939116919060ff16613093565b90506120b4856001600160a01b031660009081526002602052604090205490565b9590945092505050565b600260005414156121115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b60026000908155338152600a6020526040902080546001600160801b03620100008204169061ffff16816121875760405162461bcd60e51b815260206004820152600d60248201527f4e6f7420696e6974696174656400000000000000000000000000000000000000604482015260640161099d565b600d5461ffff1681106121dc5760405162461bcd60e51b815260206004820152601160248201527f526f756e6420696e2070726f6772657373000000000000000000000000000000604482015260640161099d565b336000908152600a60205260409020805471ffffffffffffffffffffffffffffffff000019169055600f54612222908390600160801b90046001600160801b0316613b6d565b600f80546001600160801b03928316600160801b029216919091179055600081815260096020526040812054600b5461225f91859160ff16612d7a565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26122a73084613104565b600081116122f75760405162461bcd60e51b815260206004820152600f60248201527f217769746864726177416d6f756e740000000000000000000000000000000000604482015260640161099d565b6123013382613286565b505060016000555050565b6001546001600160a01b031633146123665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146123ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6123fd620f42406064613b35565b811061244b5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964206d616e6167656d656e742066656500000000000000000000604482015260640161099d565b60145460408051918252602082018390527f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006124b5620f424083613b35565b6124bf9190613bb2565b60145550565b6001600160681b03811115611fe15760405162461bcd60e51b815260206004820152601060248201527f4f766572666c6f772075696e7431303400000000000000000000000000000000604482015260640161099d565b60008060008060008061256561253160045490565b600c54600b54600f546001600160a01b039092169160ff909116906001600160801b0380821691600160801b90041661329d565b600d5461ffff1660008181526009602052604081208490559498509296509094509250908885116125975760006125a1565b6125a18986613b6d565b90506125b56125b08288613b1d565b613388565b6125bf9087613b6d565b600f80546fffffffffffffffffffffffffffffffff1916905595506125e5826001613b1d565b600d805461ffff191661ffff92909216919091179055612605308461341e565b50939792965091945050505050565b6001600160a01b03831661268f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b03821661270b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383811660009081526003602090815260408083209386168352929052205460001981146127f957818110156127ec5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161099d565b6127f98484848403612614565b50505050565b6001600160a01b03831661287b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0382166128f75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038316600090815260026020526040902054818110156129865760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038085166000908152600260205260408082208585039055918516815290812080548492906129bd908490613b1d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a0991815260200190565b60405180910390a36127f9565b600d5461ffff16600083612a2861183c565b612a329190613b1d565b600b5490915061010090046001600160681b0316811115612a955760405162461bcd60e51b815260206004820152600a60248201527f4578636565642063617000000000000000000000000000000000000000000000604482015260640161099d565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b03831660009081526008602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b03168284015284526009909252822054600b54919291612b4f91849187919060ff16613093565b8251909150869061ffff16851415612b805760008784602001516001600160681b0316612b7c9190613b1d565b9150505b612b89816124c5565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e166000908152600890935296822095518654935197518216600160781b027fff00000000000000000000000000000000ffffffffffffffffffffffffffffff9890951662010000026effffffffffffffffffffffffffffff19909416951694909417919091179490941617909155600f54612c45918a9116613b1d565b9050612c508161303c565b600f80546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526127f99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526134fd565b600080612d4183600a613cb8565b905060008611612d515780612d70565b85612d5c8587613b6d565b612d669083613b35565b612d709190613bb2565b9695505050505050565b6000808311612dcb5760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420617373657450657253686172650000000000000000000000604482015260640161099d565b612dd682600a613cb8565b612de08486613b35565b610f539190613bb2565b3360009081526008602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b031683850152600d54918652600990945291842054600b5491949290931692612e60918591859160ff16613093565b905083612e6d5784612e6f565b805b945084612e7d575050505050565b80851115612ecd5760405162461bcd60e51b815260206004820152601160248201527f4578636565647320617661696c61626c65000000000000000000000000000000604482015260640161099d565b825161ffff168211612ee3578260200151612ee6565b60005b33600090815260086020526040902080546001600160681b039290921662010000026effffffffffffffffffffffffff000019909216919091179055612f2b8561303c565b612f358582613b6d565b336000818152600860205260409081902080546001600160801b0394909416600160781b027fff00000000000000000000000000000000ffffffffffffffffffffffffffffff909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991612fc39189825261ffff16602082015260400190565b60405180910390a2612fd63033876127ff565b5050505050565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160801b03811115611fe15760405162461bcd60e51b815260206004820152601060248201527f4f766572666c6f772075696e7431323800000000000000000000000000000000604482015260640161099d565b835160009061ffff16158015906130ae5750845161ffff1684115b156130f05760006130cd86602001516001600160681b031685856135e2565b90508086604001516001600160801b03166130e89190613b1d565b915050610f53565b50505050604001516001600160801b031690565b6001600160a01b0382166131805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0382166000908152600260205260409020548181101561320f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038316600090815260026020526040812083830390556004805484929061323e908490613b6d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612760565b505050565b600c546001600160a01b0316613281818484613649565b6040516370a0823160e01b815230600482015260009081908190819081906001600160a01b038a16906370a082319060240160206040518083038186803b1580156132e757600080fd5b505afa1580156132fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331f9190613b54565b905061332d8a82898b612d33565b9250600061333c88858b6135e2565b9050600061334a8c83613692565b9050600080821161335c576000613367565b61336789878d612d7a565b9050613373848261369e565b97509550909250505095509550955095915050565b600080600061339e600d856013546014546136aa565b92505091506000811115610b9a576012546133c2906001600160a01b031682613286565b601254600d54604080518581526020810185905261ffff90921682820152516001600160a01b03909216917f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069181900360600190a29392505050565b6001600160a01b0382166134745760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161099d565b80600460008282546134869190613b1d565b90915550506001600160a01b038216600090815260026020526040812080548392906134b3908490613b1d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000613552826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137759092919063ffffffff16565b80519091501561328157808060200190518101906135709190613ae5565b6132815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161099d565b60008083116136335760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420617373657450657253686172650000000000000000000000604482015260640161099d565b8261363f83600a613cb8565b612de09086613b35565b6040516001600160a01b0383166024820152604481018290526132819084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612ccf565b6000610b9a8284613b1d565b6000610b9a8284613b6d565b8354600285015460009182918291600160781b90046001600160681b03169082906136df9089906001600160801b031661369e565b90506000806000848411156137635760008a116136fd576000613728565b61372861370e620f42406064613b35565b6137228c61371c888a61369e565b90613784565b90613790565b925060008911613739576000613754565b61375461374a620f42406064613b35565b613722868c613784565b91506137608383613692565b90505b919b909a509098509650505050505050565b6060610f53848460008561379c565b6000610b9a8284613b35565b6000610b9a8284613bb2565b6060824710156138145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0385163b61386b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161099d565b600080866001600160a01b031685876040516138879190613cc4565b60006040518083038185875af1925050503d80600081146138c4576040519150601f19603f3d011682016040523d82523d6000602084013e6138c9565b606091505b50915091506138d98282866138e4565b979650505050505050565b606083156138f3575081610b9a565b8251156139035782518084602001fd5b8160405162461bcd60e51b815260040161099d9190613949565b60005b83811015613938578181015183820152602001613920565b838111156127f95750506000910152565b602081526000825180602084015261396881604085016020870161391d565b601f01601f19169190910160400192915050565b60006020828403121561398e57600080fd5b5035919050565b80356001600160a01b03811681146139ac57600080fd5b919050565b600080604083850312156139c457600080fd5b6139cd83613995565b946020939093013593505050565b6000806000606084860312156139f057600080fd5b6139f984613995565b9250613a0760208501613995565b9150604084013590509250925092565b600060208284031215613a2957600080fd5b610b9a82613995565b60008060408385031215613a4557600080fd5b82359150613a5560208401613995565b90509250929050565b60008060408385031215613a7157600080fd5b50508035926020909101359150565b60008060408385031215613a9357600080fd5b613a9c83613995565b9150613a5560208401613995565b600181811c90821680613abe57607f821691505b60208210811415613adf57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613af757600080fd5b81518015158114610b9a57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613b3057613b30613b07565b500190565b6000816000190483118215151615613b4f57613b4f613b07565b500290565b600060208284031215613b6657600080fd5b5051919050565b600082821015613b7f57613b7f613b07565b500390565b600080600060608486031215613b9957600080fd5b8351925060208401519150604084015190509250925092565b600082613bcf57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613c0f578160001904821115613bf557613bf5613b07565b80851615613c0257918102915b93841c9390800290613bd9565b509250929050565b600082613c2657506001610b75565b81613c3357506000610b75565b8160018114613c495760028114613c5357613c6f565b6001915050610b75565b60ff841115613c6457613c64613b07565b50506001821b610b75565b5060208310610133831016604e8410600b8410161715613c92575081810a610b75565b613c9c8383613bd4565b8060001904821115613cb057613cb0613b07565b029392505050565b6000610b9a8383613c17565b60008251613cd681846020870161391d565b919091019291505056fea2646970667358221220046ef2e1b48bb6932b133587146bd43f939cc3fd7e4ed308a50e8d4b15d044d464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063c9f369c2116100f9578063e278fe6f116100a2578063f656ba511161007c578063f656ba511461085f578063f756fa2114610887578063fb8dc75e1461088f578063fe56e232146108a257600080fd5b8063e278fe6f14610831578063e74b981b14610839578063f2fde38b1461084c57600080fd5b8063db330143116100d3578063db330143146107be578063dd62ed3e146107e5578063df1dd8261461081e57600080fd5b8063c9f369c21461078f578063ce7c2ac214610798578063db006a75146107ab57600080fd5b8063a6f7f5d61161015b578063aabaecd611610135578063aabaecd61461074d578063ad7a672f14610774578063b6b55f251461077c57600080fd5b8063a6f7f5d61461071e578063a8c62e7614610727578063a9059cbb1461073a57600080fd5b80639fcc2d751161018c5780639fcc2d75146106a8578063a457c2d714610703578063a5a279b51461071657600080fd5b80638da5cb5b1461068757806395d89b411461069857806399530b06146106a057600080fd5b8063469048401161028157806370a082311161022a5780637a9262a2116102045780637a9262a2146105f45780637e108d521461064b57806387153eb11461065e578063877887821461067e57600080fd5b806370a08231146105b0578063715018a6146105d957806375a0b6dd146105e157600080fd5b80636719b2ee1161025b5780636719b2ee1461051e5780636f31ab341461059557806370897b231461059d57600080fd5b806346904840146104ef57806347786d3714610502578063503c70aa1461051557600080fd5b80632728f333116102e357806336efd16f116102bd57806336efd16f146104b657806339509351146104c95780633f23bb73146104dc57600080fd5b80632728f333146103e1578063313ce5671461048e57806333a100ca146104a357600080fd5b80630f68b30b116103145780630f68b30b1461039157806318160ddd146103bc57806323b872dd146103ce57600080fd5b806306fdde031461033b5780630900856314610359578063095ea7b31461036e575b600080fd5b6103436108b5565b6040516103509190613949565b60405180910390f35b61036c61036736600461397c565b610947565b005b61038161037c3660046139b1565b610b61565b6040519015158152602001610350565b6034546103a4906001600160a01b031681565b6040516001600160a01b039091168152602001610350565b6004545b604051908152602001610350565b6103816103dc3660046139db565b610b7b565b600d54600e54600f546010546011546104339461ffff8116946001600160681b03620100008304811695600160781b909304169390926001600160801b0380841693600160801b900416919060ff1688565b6040805161ffff9990991689526001600160681b0397881660208a0152959096169487019490945260608601929092526001600160801b0390811660808601521660a084015260c0830152151560e082015261010001610350565b600b5460405160ff9091168152602001610350565b61036c6104b1366004613a17565b610ba1565b61036c6104c4366004613a32565b610dbf565b6103816104d73660046139b1565b610ecf565b6103c06104ea366004613a17565b610f0e565b6012546103a4906001600160a01b031681565b61036c61051036600461397c565b610f5b565b6103c060355481565b61056461052c366004613a17565b60086020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b031690820152606001610350565b61036c61108d565b61036c6105ab36600461397c565b6110f9565b6103c06105be366004613a17565b6001600160a01b031660009081526002602052604090205490565b61036c6111f0565b61036c6105ef366004613a5e565b611256565b610629610602366004613a17565b600a6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b03909116602083015201610350565b61036c61065936600461397c565b6112e2565b6103c061066c36600461397c565b60096020526000908152604090205481565b6103c060135481565b6001546001600160a01b03166103a4565b610343611563565b6103c0611572565b600b54600c546106d39160ff8116916101009091046001600160681b0316906001600160a01b031683565b6040805160ff90941684526001600160681b0390921660208401526001600160a01b031690820152606001610350565b6103816107113660046139b1565b6115a7565b61036c61165c565b6103c060145481565b6033546103a4906001600160a01b031681565b6103816107483660046139b1565b61182e565b6103a47f000000000000000000000000000000000000000000000000000000000000000081565b6103c061183c565b61036c61078a36600461397c565b6118e1565b6103c060365481565b6103c06107a6366004613a17565b61199a565b61036c6107b936600461397c565b6119b7565b6103a47f000000000000000000000000000000000000000000000000000000000000000081565b6103c06107f3366004613a80565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61036c61082c36600461397c565b611a54565b61036c611ba5565b61036c610847366004613a17565b611dc5565b61036c61085a366004613a17565b611f02565b61087261086d366004613a17565b611fe4565b60408051928352602083019190915201610350565b61036c6120be565b61036c61089d366004613a17565b61230c565b61036c6108b036600461397c565b612395565b6060600580546108c490613aaa565b80601f01602080910402602001604051908101604052809291908181526020018280546108f090613aaa565b801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b5050505050905090565b6001546001600160a01b031633146109a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60115460ff16156109f95760405162461bcd60e51b815260206004820152601160248201527f726f756e6420696e2070726f6772657373000000000000000000000000000000604482015260640161099d565b6010544211610a4a5760405162461bcd60e51b815260206004820181905260248201527f44656c6179206265747765656e20726f756e6473206e6f7420656c6170736564604482015260640161099d565b6033546040517fae74fc4d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063ae74fc4d90602401600060405180830381600087803b158015610aa957600080fd5b505af1158015610abd573d6000803e3d6000fd5b50505050600080610acf60355461251c565b600d80546001600160681b0384166201000081026effffffffffffffffffffffffff00001983168117909355600e8590556011805460ff1916600117905560358490556040805161ffff9485169490931693909317825260208201529294509092507f2f93a032ac7d7eee7307fc88610b447c5f48ae62c15f146b43168c282fa9490a910160405180910390a1505050565b600033610b6f818585612614565b60019150505b92915050565b600033610b8985828561276d565b610b948585856127ff565b60019150505b9392505050565b6001546001600160a01b03163314610bfb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6033546001600160a01b031615610cb55760335460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190613ae5565b505b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560405163095ea7b360e01b8152600481019190915260001960248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190613ae5565b506040516001600160a01b03821681527f4da9c22c924692646a21cf1f423781ae3285198dc22e8a6912835d3272b90b3c906020015b60405180910390a150565b60026000541415610e125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260005581610e4e5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161099d565b6001600160a01b038116610ea45760405162461bcd60e51b815260206004820152600960248201527f216372656469746f720000000000000000000000000000000000000000000000604482015260640161099d565b610eae8282612a16565b600c54610ec6906001600160a01b0316333085612c82565b50506001600055565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190610b6f9082908690610f09908790613b1d565b612614565b600b5460009060ff1681610f3e610f2460045490565b610f2c61183c565b600f546001600160801b031685612d33565b9050610f53610f4c8561199a565b8284612d7a565b949350505050565b6001546001600160a01b03163314610fb55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b600081116110055760405162461bcd60e51b815260206004820152600760248201527f216e657743617000000000000000000000000000000000000000000000000000604482015260640161099d565b600b54604080516101009092046001600160681b031682526020820183905233908201527f0e45875b8819e52adac9df2787285bc765235018d84ab492668edfcf944628c49060600160405180910390a161105f816124c5565b600b80546001600160681b03909216610100026dffffffffffffffffffffffffff0019909216919091179055565b600260005414156110e05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260009081556110f2906001612dea565b6001600055565b6001546001600160a01b031633146111535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b611161620f42406064613b35565b81106111af5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e636520666565000000000000000000604482015260640161099d565b60135460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a1601355565b6001546001600160a01b0316331461124a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6112546000612fdd565b565b6033546034546040517f7083a90400000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b039182166044820152911690637083a90490606401600060405180830381600087803b1580156112c657600080fd5b505af11580156112da573d6000803e3d6000fd5b505050505050565b600260005414156113355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b6002600055806113745760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161099d565b336000908152600860205260409020546201000090046001600160681b03161515806113be575033600090815260086020526040902054600160781b90046001600160801b031615155b156113cf576113cf60006001612dea565b600d54336000818152600a60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b031660008215611458576114518683613b1d565b90506114c7565b81156114a65760405162461bcd60e51b815260206004820152601160248201527f4578697374696e67207769746864726177000000000000000000000000000000604482015260640161099d565b50336000908152600a60205260409020805461ffff191661ffff8616179055845b6114d08161303c565b336000908152600a6020526040812080546001600160801b03808516620100000271ffffffffffffffffffffffffffffffff00001990921691909117909155600f54611525918991600160801b900416613b1d565b90506115308161303c565b600f80546001600160801b03808416600160801b0291161790556115553330896127ff565b505060016000555050505050565b6060600680546108c490613aaa565b60006115a261158060045490565b61158861183c565b600f54600b546001600160801b039091169060ff16612d33565b905090565b3360008181526003602090815260408083206001600160a01b0387168452909152812054909190838110156116445760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161099d565b6116518286868403612614565b506001949350505050565b6001546001600160a01b031633146116b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b60115460ff166116f75760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b600d80546000600e557fffffffff0000000000000000000000000000000000000000000000000000ffff8116620100009091046001600160681b0316600160781b81026effffffffffffffffffffffffff00001916919091179091556117606201518042613b1d565b6010556011805460ff191690556033546034546040517f7dd0db1b0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911690637dd0db1b90602401600060405180830381600087803b1580156117cf57600080fd5b505af11580156117e3573d6000803e3d6000fd5b5050600d546040805161ffff90921682526001600160681b03851660208301527f72a38b5b2905463b2dd317993b07770e582b99731092f75150f433b6a9f9c89e9350019050610db4565b600033610b6f8185856127ff565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b89190613b54565b600e54600d546118d791906201000090046001600160681b0316613b6d565b6115a29190613b1d565b600260005414156119345760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b6002600055806119705760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161099d565b61197a8133612a16565b600c54611992906001600160a01b0316333084612c82565b506001600055565b60008060006119a884611fe4565b9092509050610f538183613b1d565b60026000541415611a0a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b600260005580611a495760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161099d565b611992816000612dea565b60115460ff16611a955760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b6033546034546040517fa8c379c2000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b0391821660248201526000928392839291169063a8c379c290604401606060405180830381600087803b158015611b0557600080fd5b505af1158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3d9190613b84565b92509250925080600d60010154611b549190613b6d565b600e556040805133815260208101859052908101839052606081018290527f150edd20b748bc680273d4bc59d5659c3229edf2f102c013595b9b3238e158869060800160405180910390a150505050565b603354604080517f03c4d3d6000000000000000000000000000000000000000000000000000000008152905142926001600160a01b0316916303c4d3d69160048083019260209291908290030181600087803b158015611c0457600080fd5b505af1158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c9190613b54565b10611caf5760405162461bcd60e51b815260206004820152602760248201527f63616e6e6f7420636c6f736520726f756e6420696620626f617264206e6f742060448201527f6578706972656400000000000000000000000000000000000000000000000000606482015260840161099d565b60115460ff16611cf05760405162461bcd60e51b815260206004820152600c60248201526b1c9bdd5b990818db1bdcd95960a21b604482015260640161099d565b600d80546000600e557fffffffff0000000000000000000000000000000000000000000000000000ffff8116620100009091046001600160681b0316600160781b81026effffffffffffffffffffffffff0000191691909117909155611d596201518042613b1d565b6010556011805460ff19169055603354604080517f83cea54200000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916383cea5429160048181019260009290919082900301818387803b1580156117cf57600080fd5b6001546001600160a01b03163314611e1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6001600160a01b038116611e755760405162461bcd60e51b815260206004820152601060248201527f216e6577466565526563697069656e7400000000000000000000000000000000604482015260640161099d565b6012546001600160a01b0382811691161415611ed35760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e740000000000000000604482015260640161099d565b6012805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b03163314611f5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6001600160a01b038116611fd85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161099d565b611fe181612fdd565b50565b6001600160a01b03811660009081526008602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291612062575050506001600160a01b031660009081526002602052604081205491565b600d54815161ffff908116600090815260096020526040812054600b5491936120939386939116919060ff16613093565b90506120b4856001600160a01b031660009081526002602052604090205490565b9590945092505050565b600260005414156121115760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161099d565b60026000908155338152600a6020526040902080546001600160801b03620100008204169061ffff16816121875760405162461bcd60e51b815260206004820152600d60248201527f4e6f7420696e6974696174656400000000000000000000000000000000000000604482015260640161099d565b600d5461ffff1681106121dc5760405162461bcd60e51b815260206004820152601160248201527f526f756e6420696e2070726f6772657373000000000000000000000000000000604482015260640161099d565b336000908152600a60205260409020805471ffffffffffffffffffffffffffffffff000019169055600f54612222908390600160801b90046001600160801b0316613b6d565b600f80546001600160801b03928316600160801b029216919091179055600081815260096020526040812054600b5461225f91859160ff16612d7a565b604080518281526020810186905291925033917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26122a73084613104565b600081116122f75760405162461bcd60e51b815260206004820152600f60248201527f217769746864726177416d6f756e740000000000000000000000000000000000604482015260640161099d565b6123013382613286565b505060016000555050565b6001546001600160a01b031633146123665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6034805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031633146123ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161099d565b6123fd620f42406064613b35565b811061244b5760405162461bcd60e51b815260206004820152601660248201527f496e76616c6964206d616e6167656d656e742066656500000000000000000000604482015260640161099d565b60145460408051918252602082018390527f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a17f00000000000000000000000000000000000000000000000000000000000000006124b5620f424083613b35565b6124bf9190613bb2565b60145550565b6001600160681b03811115611fe15760405162461bcd60e51b815260206004820152601060248201527f4f766572666c6f772075696e7431303400000000000000000000000000000000604482015260640161099d565b60008060008060008061256561253160045490565b600c54600b54600f546001600160a01b039092169160ff909116906001600160801b0380821691600160801b90041661329d565b600d5461ffff1660008181526009602052604081208490559498509296509094509250908885116125975760006125a1565b6125a18986613b6d565b90506125b56125b08288613b1d565b613388565b6125bf9087613b6d565b600f80546fffffffffffffffffffffffffffffffff1916905595506125e5826001613b1d565b600d805461ffff191661ffff92909216919091179055612605308461341e565b50939792965091945050505050565b6001600160a01b03831661268f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b03821661270b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383811660009081526003602090815260408083209386168352929052205460001981146127f957818110156127ec5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161099d565b6127f98484848403612614565b50505050565b6001600160a01b03831661287b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0382166128f75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038316600090815260026020526040902054818110156129865760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038085166000908152600260205260408082208585039055918516815290812080548492906129bd908490613b1d565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612a0991815260200190565b60405180910390a36127f9565b600d5461ffff16600083612a2861183c565b612a329190613b1d565b600b5490915061010090046001600160681b0316811115612a955760405162461bcd60e51b815260206004820152600a60248201527f4578636565642063617000000000000000000000000000000000000000000000604482015260640161099d565b60408051858152602081018490526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b03831660009081526008602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b03168284015284526009909252822054600b54919291612b4f91849187919060ff16613093565b8251909150869061ffff16851415612b805760008784602001516001600160681b0316612b7c9190613b1d565b9150505b612b89816124c5565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038e166000908152600890935296822095518654935197518216600160781b027fff00000000000000000000000000000000ffffffffffffffffffffffffffffff9890951662010000026effffffffffffffffffffffffffffff19909416951694909417919091179490941617909155600f54612c45918a9116613b1d565b9050612c508161303c565b600f80546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526127f99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526134fd565b600080612d4183600a613cb8565b905060008611612d515780612d70565b85612d5c8587613b6d565b612d669083613b35565b612d709190613bb2565b9695505050505050565b6000808311612dcb5760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420617373657450657253686172650000000000000000000000604482015260640161099d565b612dd682600a613cb8565b612de08486613b35565b610f539190613bb2565b3360009081526008602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b031683850152600d54918652600990945291842054600b5491949290931692612e60918591859160ff16613093565b905083612e6d5784612e6f565b805b945084612e7d575050505050565b80851115612ecd5760405162461bcd60e51b815260206004820152601160248201527f4578636565647320617661696c61626c65000000000000000000000000000000604482015260640161099d565b825161ffff168211612ee3578260200151612ee6565b60005b33600090815260086020526040902080546001600160681b039290921662010000026effffffffffffffffffffffffff000019909216919091179055612f2b8561303c565b612f358582613b6d565b336000818152600860205260409081902080546001600160801b0394909416600160781b027fff00000000000000000000000000000000ffffffffffffffffffffffffffffff909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991612fc39189825261ffff16602082015260400190565b60405180910390a2612fd63033876127ff565b5050505050565b600180546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160801b03811115611fe15760405162461bcd60e51b815260206004820152601060248201527f4f766572666c6f772075696e7431323800000000000000000000000000000000604482015260640161099d565b835160009061ffff16158015906130ae5750845161ffff1684115b156130f05760006130cd86602001516001600160681b031685856135e2565b90508086604001516001600160801b03166130e89190613b1d565b915050610f53565b50505050604001516001600160801b031690565b6001600160a01b0382166131805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0382166000908152600260205260409020548181101561320f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b038316600090815260026020526040812083830390556004805484929061323e908490613b6d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612760565b505050565b600c546001600160a01b0316613281818484613649565b6040516370a0823160e01b815230600482015260009081908190819081906001600160a01b038a16906370a082319060240160206040518083038186803b1580156132e757600080fd5b505afa1580156132fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331f9190613b54565b905061332d8a82898b612d33565b9250600061333c88858b6135e2565b9050600061334a8c83613692565b9050600080821161335c576000613367565b61336789878d612d7a565b9050613373848261369e565b97509550909250505095509550955095915050565b600080600061339e600d856013546014546136aa565b92505091506000811115610b9a576012546133c2906001600160a01b031682613286565b601254600d54604080518581526020810185905261ffff90921682820152516001600160a01b03909216917f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c0069181900360600190a29392505050565b6001600160a01b0382166134745760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161099d565b80600460008282546134869190613b1d565b90915550506001600160a01b038216600090815260026020526040812080548392906134b3908490613b1d565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000613552826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137759092919063ffffffff16565b80519091501561328157808060200190518101906135709190613ae5565b6132815760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161099d565b60008083116136335760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420617373657450657253686172650000000000000000000000604482015260640161099d565b8261363f83600a613cb8565b612de09086613b35565b6040516001600160a01b0383166024820152604481018290526132819084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612ccf565b6000610b9a8284613b1d565b6000610b9a8284613b6d565b8354600285015460009182918291600160781b90046001600160681b03169082906136df9089906001600160801b031661369e565b90506000806000848411156137635760008a116136fd576000613728565b61372861370e620f42406064613b35565b6137228c61371c888a61369e565b90613784565b90613790565b925060008911613739576000613754565b61375461374a620f42406064613b35565b613722868c613784565b91506137608383613692565b90505b919b909a509098509650505050505050565b6060610f53848460008561379c565b6000610b9a8284613b35565b6000610b9a8284613bb2565b6060824710156138145760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161099d565b6001600160a01b0385163b61386b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161099d565b600080866001600160a01b031685876040516138879190613cc4565b60006040518083038185875af1925050503d80600081146138c4576040519150601f19603f3d011682016040523d82523d6000602084013e6138c9565b606091505b50915091506138d98282866138e4565b979650505050505050565b606083156138f3575081610b9a565b8251156139035782518084602001fd5b8160405162461bcd60e51b815260040161099d9190613949565b60005b83811015613938578181015183820152602001613920565b838111156127f95750506000910152565b602081526000825180602084015261396881604085016020870161391d565b601f01601f19169190910160400192915050565b60006020828403121561398e57600080fd5b5035919050565b80356001600160a01b03811681146139ac57600080fd5b919050565b600080604083850312156139c457600080fd5b6139cd83613995565b946020939093013593505050565b6000806000606084860312156139f057600080fd5b6139f984613995565b9250613a0760208501613995565b9150604084013590509250925092565b600060208284031215613a2957600080fd5b610b9a82613995565b60008060408385031215613a4557600080fd5b82359150613a5560208401613995565b90509250929050565b60008060408385031215613a7157600080fd5b50508035926020909101359150565b60008060408385031215613a9357600080fd5b613a9c83613995565b9150613a5560208401613995565b600181811c90821680613abe57607f821691505b60208210811415613adf57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613af757600080fd5b81518015158114610b9a57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613b3057613b30613b07565b500190565b6000816000190483118215151615613b4f57613b4f613b07565b500290565b600060208284031215613b6657600080fd5b5051919050565b600082821015613b7f57613b7f613b07565b500390565b600080600060608486031215613b9957600080fd5b8351925060208401519150604084015190509250925092565b600082613bcf57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115613c0f578160001904821115613bf557613bf5613b07565b80851615613c0257918102915b93841c9390800290613bd9565b509250929050565b600082613c2657506001610b75565b81613c3357506000610b75565b8160018114613c495760028114613c5357613c6f565b6001915050610b75565b60ff841115613c6457613c64613b07565b50506001821b610b75565b5060208310610133831016604e8410600b8410161715613c92575081810a610b75565b613c9c8383613bd4565b8060001904821115613cb057613cb0613b07565b029392505050565b6000610b9a8383613c17565b60008251613cd681846020870161391d565b919091019291505056fea2646970667358221220046ef2e1b48bb6932b133587146bd43f939cc3fd7e4ed308a50e8d4b15d044d464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "closeRound()": {
        "details": "close the current round, enable user to deposit for the next round"
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "params": {
          "amount": "is the amount of `asset` to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "params": {
          "amount": "is the amount of `asset` to deposit",
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "emergencyCloseRound()": {
        "details": "Close the current round, enable user to deposit for the next round"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "reducePosition(uint256,uint256)": {
        "details": "anyone close part of the position with premium made by the strategy if a position is dangerous",
        "params": {
          "positionId": "the positiion to close"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setLyraRewardRecipient(address)": {
        "params": {
          "recipient": "recipient address"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setStrategy(address)": {
        "details": "set strategy contract. This function can only be called by owner.",
        "params": {
          "_strategy": "new strategy contract address"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "startNextRound(uint256)": {
        "params": {
          "boardId": "board id (asset + expiry) for next round."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "trade(uint256)": {
        "details": "anyone can trigger a trade",
        "params": {
          "strikeId": "the strike id to sell"
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "deposit(uint256)": {
        "notice": "Deposits the `asset` from msg.sender."
      },
      "depositFor(uint256,address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setLyraRewardRecipient(address)": {
        "notice": "set set new address to receive Lyra trading reward on behalf of the vault"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "startNextRound(uint256)": {
        "notice": "start the next round"
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "LyraVault help users run option-selling strategies on Lyra AMM.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36472,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 36290,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 36517,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36523,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 36525,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 36527,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 36529,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 36394,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 36397,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 38087,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)40266_storage)"
      },
      {
        "astId": 38092,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 38098,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Withdrawal)40271_storage)"
      },
      {
        "astId": 38102,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(VaultParams)40242_storage"
      },
      {
        "astId": 38106,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(VaultState)40259_storage"
      },
      {
        "astId": 38109,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 38112,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 38115,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 38119,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "____gap",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 39371,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "strategy",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IStrategy)40017"
      },
      {
        "astId": 39373,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "lyraRewardRecipient",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 39375,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 39377,
        "contract": "contracts/core/LyraVault.sol:LyraVault",
        "label": "optionAllocation",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStrategy)40017": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)40266_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)40266_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)40271_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)40271_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)40266_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 40261,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 40263,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 40265,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultParams)40242_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 40237,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "decimals",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 40239,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "cap",
            "offset": 1,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 40241,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "asset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultState)40259_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 40244,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 40246,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 40248,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 40250,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "lockedAmountLeft",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 40252,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 40254,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 40256,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "nextRoundReadyTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 40258,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "roundInProgress",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Withdrawal)40271_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 40268,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 40270,
            "contract": "contracts/core/LyraVault.sol:LyraVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}